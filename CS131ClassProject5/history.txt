
******* COMMAND HISTORY FOR BENJAMIN LE *******

Number of entries:
awk ‘NR > 1 { count ++ } END {print count} ‘ spotifyCleaned.csv

Overview of Features:
awk -F ',' 'NR==1 {
    for (i=2; i<=NF; i++) {
   	 printf "%d. %s\n", i-1, $i
    }
}' spotifyCleaned.csv

Number of countries:
awk -F ‘,’ ‘{print $2}’ spotifyCleaned.csv |sort | uniq | wc -l

Number of artists:
awk -F ‘,’ ‘{print $4}’ spotifyCleaned.csv |sort | uniq | wc -l

Smallest Score:
awk -F ',' 'NR > 1 && $6 ~ /^[0-9]+$/ {print $6}' spotifyCleaned.csv | sort -n | head -n 1

Biggest Score:
awk -F ',' 'NR > 1 && $6 ~ /^[0-9]+$/ {print $6}' spotifyCleaned.csv | sort -n | tail -n 1

Check popularity of first 1000 songs
awk -F ',' 'NR > 1 && NR <= 101 { if ($6 > 50) above_50++; else below_50++ } END { print "Above 50: " above_50; print "Below 50: " below_50 }' spotifyCleaned.csv


******* COMMAND HISTORY FOR ALEX GIANG *******


Top 5 Danceable Music (based on danceability value):
cut -d’,’ -f3,4,9 spotifyCleaned.csv > spotify_cut.csv
{ echo “Top 5 Danceable: “; sort -t’,’ -l3 -r spotify_cut.csv | uniq | tail -n +15 | head -n 10; } > top_5_danceable_music.csv
awk -F’,’ ‘NR==1{print $0} NR>1 {gsub(/\(|\)/,””,$3); print $2 “ - “ $1 “ (“ $3 “)”}; top_5_danceable_music.csv

Top 10 Workout Music (based on energy value):
cut -d’,’ -f3,4,12 spotifyCleaned.csv > spotify_cut2.csv
{ echo “Top 10 Workout/Energetic Music: “; sort -t’,’ -l3 -r spotify_cut2.csv | uniq | tail -n +15 | head -n 10; } > top_10_workout_energetic_music.csv
awk -F’,’ ‘NR==1{print $0} NR>1 {gsub(/\(|\)/,””,$3); print $2 “ - “ $1 “ (“ $3 “)”}; top_10_workout_energetic_music.csv

Search for a specific artist for workout/dance music (via regex, danceability/energy value): 
Script:
echo “Enter an artist name:”
read userInput

grep -iE “^[^,]*,[^,]*,[^,]*,$UserInput,” spotifyCleaned.csv | \
awk -F’,’ ‘!seen[$3 “ - “ $4]++ {printf “%s - %s (Danceability: %s, Energy: %s)\n”, $4, $3, $9, $12}’)



******* COMMAND HISTORY FOR NICOLE WITT  *******

Make Bash Script to clean and filter dataset

  370  cd CS131GroupProject
  371  touch clean.sh
  372  ls
  373  vim clean.sh
  374  chmod +x clean.sh
  377  vim clean.sh
  400  ./clean.sh spotify.csv

 Make new file with only the tempo column to use in plot

  488  cut -d ',' -f19 spotifyCleaned.csv > tempo.txt
  489  vim tempo.txt

 Make an awk script to calculate average value for numerical columns
  490  vim average.awk
  491  chmod +x average.awk

 Make new file with only duration column to use in plot 
  492  cut -d ',' -f11 spotifyCleaned.csv > duration.txt

 Make awk scripts to find min and max values for numerical columns
  591  vim min.awk
  594  chmod +x min.awk
  596  vim max.awk
  597  chmod +x max.awk

 Calculate average, min, and max for a handful of the numerical column
  592  awk -F',' -v col_num=11 -f average.awk spotifyCleaned.csv > stats.txt
  598  awk -F',' -v col_num=11 -f min.awk spotifyCleaned.csv >> stats.txt
  607  awk -F',' -v col_num=11 -f max.awk spotifyCleaned.csv >> stats.txt
  608  vim stats.txt
  618  awk -F',' -v col_num=6 -f average.awk spotifyCleaned.csv > stats.txt
  619  awk -F',' -v col_num=6 -f min.awk spotifyCleaned.csv >> stats.txt
  620  awk -F',' -v col_num=6 -f max.awk spotifyCleaned.csv >> stats.txt
  621  vim stats.txt
  628  awk -F',' -v col_num=9 -f average.awk spotifyCleaned.csv >> stats.txt
  629  awk -F',' -v col_num=9 -f min.awk spotifyCleaned.csv >> stats.txt
  630  awk -F',' -v col_num=9 -f max.awk spotifyCleaned.csv >> stats.txt
  631  vim stats.txt
  632  vim average.awk
  633  awk -F',' -v col_num=9 -f average.awk spotifyCleaned.csv >> stats.txt
  634  vim average.awk
  635  awk -F',' -v col_num=9 -f average.awk spotifyCleaned.csv >> stats.txt
  636  awk -F',' -v col_num=9 -f min.awk spotifyCleaned.csv >> stats.txt
  637  awk -F',' -v col_num=9 -f max.awk spotifyCleaned.csv >> stats.txt
  638  vim stats.txt
  639  awk -F',' -v col_num=10 -f average.awk spotifyCleaned.csv >> stats.txt
  640  awk -F',' -v col_num=10 -f min.awk spotifyCleaned.csv >> stats.txt
  641  awk -F',' -v col_num=10 -f max.awk spotifyCleaned.csv >> stats.txt
  642  vim stats.txt
  643  awk -F',' -v col_num=12 -f average.awk spotifyCleaned.csv >> stats.txt
  644  awk -F',' -v col_num=12 -f min.awk spotifyCleaned.csv >> stats.txt
  645  awk -F',' -v col_num=12 -f max.awk spotifyCleaned.csv >> stats.txt
  646  vim stats.txt
  647  awk -F',' -v col_num=15 -f average.awk spotifyCleaned.csv >> stats.txt
  648  awk -F',' -v col_num=15 -f min.awk spotifyCleaned.csv >> stats.txt
  649  awk -F',' -v col_num=15 -f max.awk spotifyCleaned.csv >> stats.txt
  650  vim stats.txt
  651  awk -F',' -v col_num=18 -f average.awk spotifyCleaned.csv >> stats.txt
  652  awk -F',' -v col_num=18 -f min.awk spotifyCleaned.csv >> stats.txt
  653  awk -F',' -v col_num=18 -f max.awk spotifyCleaned.csv >> stats.txt
  654  vim stats.txt
  659  awk -F',' -v col_num=21 -f average.awk spotifyCleaned.csv >> stats.txt
  660  awk -F',' -v col_num=21 -f min.awk spotifyCleaned.csv >> stats.txt
  661  awk -F',' -v col_num=21 -f max.awk spotifyCleaned.csv >> stats.txt
  665  awk -F',' -v col_num=19 -f average.awk spotifyCleaned.csv >> stats.txt
  667  awk -F',' -v col_num=19 -f average.awk spotifyCleaned.csv >> stats.txt
  671  awk -F',' -v col_num=19 -f min.awk spotifyCleaned.csv >> stats.txt
  672  awk -F',' -v col_num=19 -f max.awk spotifyCleaned.csv >> stats.txt
  673  vim stats.txt

 Make an awk script to find the mode from a list of numerical values
  674  vim mode.awk
  675  chmod +x mode.awk

 Use the mode awk script to find the mode of the key column
  679  awk -F',' -v col_num=14 -f mode.awk spotifyCleaned.csv >> stats.txt
  680  vim stats.txt
  681  vim stats.txt

 Make a separate file with the data from the energy popularity, and acousticness columns to use in plot
  683  cut -d ',' -f12 spotifyCleaned.csv > energy.txt
  685  cut -d ',' -f6 spotifyCleaned.csv > positive.txt
  686  cut -d ',' -f10 spotifyCleaned.csv > acoustic.txt

 Make a separate file with the data from the popularity and tempo columns to make a plot
  688  cut -d "," -f6,19 spotifyCleaned.csv > compare.csv
  689  vim compare.csv

 Calculate the min and max song duration 
  691  awk -F',' -v col_num=11 -f max.awk spotifyCleaned.csv >> stats.txt
  692  awk -F',' -v col_num=11 -f min.awk spotifyCleaned.csv >> stats.txt



******* COMMAND HISTORY FOR AMAN KAUR *******


Top 10 music with postiveness

awk -F ',' 'NR>1 && substr($7, 1, 
4)=="2020" {print $21","$2, " ",$5}' spotifyCleaned.csv | sort -t',' -k1nr | head -n 10

Top Artist in Top 50 Countries

awk -F ',' 'NR>1 && NR<=50 {artists[$2]++} END {count=0; max_count=0; max_artist=""; for (artist in artists) {count++; if (artists[artist] > 1) multi_country_count++; if (artists[artist] > max_count) {max_count=artists[artist]; max_artist=artist}}} END {print "Number of artists in top 50 for more than one country:", multi_country_count; print "Artist in the most countries:", max_artist, $4  "(", max_count, "countries)"}' spotifyCleaned.csv

awk -F ',' 'NR>1 {total++; if ($20 != "4") not_4++} END {percentage = (not_4 / total) * 100; print "Percentage of songs with time signature not equal to 4:", percentage, "%"}' spotifyCleaned.csv

Percentage other than 4/4 

awk -F ',' 'NR>1 {total++; if ($20 != "4") not_4++} END {percentage = (not_4 / total) * 100; print "Percentage of songs with time signature not equal to 4:", percentage, "%"}' spotifyCleaned.csv


